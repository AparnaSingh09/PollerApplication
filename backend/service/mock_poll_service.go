// Code generated by MockGen. DO NOT EDIT.
// Source: PollerApplication/service (interfaces: PollService)

// Package service is a generated GoMock package.
package service

import (
	model "PollerApplication/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPollService is a mock of PollService interface.
type MockPollService struct {
	ctrl     *gomock.Controller
	recorder *MockPollServiceMockRecorder
}

// MockPollServiceMockRecorder is the mock recorder for MockPollService.
type MockPollServiceMockRecorder struct {
	mock *MockPollService
}

// NewMockPollService creates a new mock instance.
func NewMockPollService(ctrl *gomock.Controller) *MockPollService {
	mock := &MockPollService{ctrl: ctrl}
	mock.recorder = &MockPollServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollService) EXPECT() *MockPollServiceMockRecorder {
	return m.recorder
}

// GetPollByID mocks base method.
func (m *MockPollService) GetPollByID(arg0 string) (model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollByID", arg0)
	ret0, _ := ret[0].(model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollByID indicates an expected call of GetPollByID.
func (mr *MockPollServiceMockRecorder) GetPollByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollByID", reflect.TypeOf((*MockPollService)(nil).GetPollByID), arg0)
}

// SavePollToMap mocks base method.
func (m *MockPollService) SavePollToMap(arg0 model.Poll) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePollToMap", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePollToMap indicates an expected call of SavePollToMap.
func (mr *MockPollServiceMockRecorder) SavePollToMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePollToMap", reflect.TypeOf((*MockPollService)(nil).SavePollToMap), arg0)
}

// SaveUserInMap mocks base method.
func (m *MockPollService) SaveUserInMap(arg0 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserInMap", arg0)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserInMap indicates an expected call of SaveUserInMap.
func (mr *MockPollServiceMockRecorder) SaveUserInMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserInMap", reflect.TypeOf((*MockPollService)(nil).SaveUserInMap), arg0)
}

// UpdatePollResult mocks base method.
func (m *MockPollService) UpdatePollResult(arg0, arg1 string) (model.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollResult", arg0, arg1)
	ret0, _ := ret[0].(model.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePollResult indicates an expected call of UpdatePollResult.
func (mr *MockPollServiceMockRecorder) UpdatePollResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollResult", reflect.TypeOf((*MockPollService)(nil).UpdatePollResult), arg0, arg1)
}
